1> Operatos in Java ? 
Operatos are the symbols which tells compiler, what operation is to be performed on operands. 

So any expression is java have some components in it which are. 
a> operands  
2> Operators 

For example: 
int Sum = number1 + number2 ; 
So the number1 and numiber2 are our operands and '+' symbols tells the compiler to add the value of both the operands and store it in variable sum. 
'+' is the operator; 

Types of operators ; 
1> Arithematic Operators, in here we again have 3 types (unary, binary, ternary) operators. 
2> Relational Operators
3> Logical Operators
4> Bitwise Operators
5> Assignment Operators

a> Arithematic Operators : 
Here we have 3 Types as binary , unary , ternary ; 

firstly we'll look at binary operators. 
Binary Operators are the operators that we generally use in mathemaatices, The operators which requires Two Operands to perform the opeartion are called Binary operator.
1> '+' = addition operator 
2> '-' = subtraction operator 
3> '/' = division operator, this operator returns the quotient.
4> '%' = modulus operator, this operator returns the remainder. 
5> '*' = multiplication operator 

Unary Operators, these are those operators which don't require two operands, and only needs one operand to complete the operation. 
1> '++' = This is called increment operator, And it increments the value by one, each time it is executed. And in here we again have two types of operators. 
   a> '++sum' = This is called pre-increment operator, as the value will get changed first and then the value will be used. 
   b> 'sum++' = This is called post-increment operator, as the value will get used first and then the value will get changed 
2> '--' = This is decrement operator, And it decrements the value by one, each time it is executed.  And in here we again have two types of operators.
   a> '--sum' = This is called pre-decrement operator, as the value will get changed first and then the value will be used. 
   b> 'sum--' = This is called post-decrement operator, as the value will get used first and then the value will get changed 

b> Relational Operators : 
Relational operators are used to check for any relation in between operands, Usually the answer of relational operators are in boolean form (true or false).
1> '==' = Equality operator, this checks if the operands are equal or not. 
2> '!=' = this check if the two operands are not equal , and if the two operands are not equal then it returns true otherwise false 
    example int numb1 = 10 ; 
            int numb2 = 10 ; 
            if (numb1 != numb2){
                System.out.println("The Two numbers are not equal");
            }else{
                System.out.println("The Two numbers are equal");
            }
3> '>' = check if operand on left side is greator than the operand on right side   
4> '<' = check if the operand on left side is less than the operand on right side 
5> '>=' = check if operand on left side is greator than and equal to the operand on right side  
6> '<' = check if the operand on left side is less than and equal to the operand on right side 

c> Logical Operators :
Logical Operatoes are used to check for checking the relation in between two statements. They also return the answer in true or false or in boolean form.
a> '&&' = This is called AND operator, and it is true when both the statements are true.
    And operator chart : 

    state1 | state2 | result
    ------- -------- -------
    false  | false  | false 
    true   | false  | false 
    false  | true   | false 
    true   | true   | true 

b> '||' = This is called OR operator, and it is true if any state is true. 
    OR operator Chart :

    state1 | state2 | result
    ------- -------- -------
    false  | false  | false 
    true   | false  | true
    false  | true   | true
    true   | true   | true 

c> '!' = This is called logical not operator, and it return just opposite of whatever the statement returns. 
    Not operator Chart : 

    state1 | result
    ------- -------
    false  | true
    true   | false 

d> Assignment Operators : 
These varibles are used to assign values to the variables. The value on the right side is assigned to the varible on the left side. 
Example:
int number1 = 10; So here 10 is on right side and number1 is on left side so, 10 will get assigned to number1 , 
Types of Assignment Operators: 
1> '=' = This is used to assign value to a variable. 
2> '+=' = this is used to assign value and at the same time apply the operator.
    Example : 
    Statement 1=>
    int number1 = number1 + 10 ; 
    statement 2=>
    int number1 += 10 ; 
    Both the statements will produce same output but the 2nd statement will get executed faster than statement1 .
3> '-=' =  this is used to assign value and at the same time apply the operator.
    Example : 
    Statement 1=>
    int number1 = number1 - 10 ; 
    statement 2=>
    int number1 -= 10 ; 
    Both the statements will produce same output but the 2nd statement will get executed faster than statement1 .
4> '*=' = this is used to assign value and at the same time apply the operator.
    Example : 
    Statement 1=>
    int number1 = number1 * 10 ; 
    statement 2=>
    int number1 *= 10 ; 
    Both the statements will produce same output but the 2nd statement will get executed faster than statement1 .
5> '/=' = this is used to assign value and at the same time apply the operator.
    Example : 
    Statement 1=>
    int number1 = number1 / 10 ; 
    statement 2=>
    int number1 /= 10 ; 
    Both the statements will produce same output but the 2nd statement will get executed faster than statement1 .

Note : 
Operator Precedence determines the order in which the operators in an expression are evaluated.

For example 
int x = 3 * 4 - 1;
In the above example, the value of x will be 11, not9.This happens because the precedence of * operator is higher than - operator. That is why the expression is 
evaluated as (3 * 4) - 1 and not 3 * (4 - 1) .
If an expression has two operators with similar precedence, the expression is evaluated according to itsassociativity(either leftto right, or right to left).
